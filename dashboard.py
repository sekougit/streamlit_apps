import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
from models_scoring import get_trained_model  # Importer le mod√®le depuis model.py

# üìå Charger les donn√©es de test
try:
    donnees_test = pd.read_csv("sample_test_imputed.csv")
except FileNotFoundError:
    st.error("‚ùå Fichier sample_test_imputed.csv non trouv√©.")
    st.stop()

# üìå V√©rifier si les colonnes essentielles existent
required_columns = ["SK_ID_CURR", "TARGET"]
for col in required_columns:
    if col not in donnees_test.columns:
        st.error(f"‚ùå La colonne {col} est absente du fichier de test.")
        st.stop()

# üìå Pr√©parer un √©chantillon de donn√©es
base_sample = donnees_test.sample(50, random_state=42)
list_id = base_sample["SK_ID_CURR"].unique().tolist()

# üìå Charger le mod√®le
model = get_trained_model()

# üìå Interface Streamlit
def main():
    st.sidebar.write("Bienvenue dans le menu de l'application")
    option = st.sidebar.radio("Faites votre choix", ["Accueil", "Donn√©es", "Pr√©diction"])
    id = st.sidebar.selectbox("Veuillez choisir l'ID client", list_id)

    if option == "Accueil":
        st.title("Application de pr√©diction de scoring cr√©dit")
        st.markdown("""
            **L'application de scoring de cr√©dit aide √† √©valuer la solvabilit√© des individus √† l'aide d'un mod√®le de Machine Learning.
            Cela acc√©l√®re le processus de d√©cision et am√©liore l'inclusion financi√®re tout en r√©duisant les biais humains.**
        """)

    elif option == "Donn√©es":
        st.title("Visualisation des donn√©es")
        st.subheader("Auteur: S√®kou Dram√©")
        st.write(f"Base de donn√©es avec {len(base_sample)} individus")
        st.write(base_sample)

    elif option == "Pr√©diction":
        infos = base_sample[base_sample["SK_ID_CURR"] == id].T
        st.write(infos)

        if st.button("Pr√©dire la solvabilit√©"):
            try:
                input_data = base_sample[base_sample["SK_ID_CURR"] == id].drop(columns=["TARGET", "SK_ID_CURR"]).values
                prediction = model.predict(input_data)[0]

                if prediction == 1:
                    st.success("‚úÖ Cr√©dit accept√© !")
                else:
                    st.error("‚ùå Cr√©dit refus√©.")
            except Exception as e:
                st.error(f"Erreur de pr√©diction : {e}")

if __name__ == '__main__':
    main()
